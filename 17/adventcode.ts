import { puzzle1_ex, puzzle1_number_of_test, puzzle1_resultex, puzzle2_number_of_test, puzzle2_resultex } from "./testinput";
import * as fs from 'fs';
import * as util from 'util'
import { defaultMaxListeners } from "stream";
import { WriteOutput } from "./WriteOutput";
const readFile = util.promisify(fs.readFile);

const outFile = new WriteOutput();

class Water {

    chart: Array<Array<string>> = new Array;
    currentPosX: number;
    currentPosY: number;
    constructor(chart, startPosX, startPosY) {
        this.chart = chart;
        this.currentPosX = startPosX;
        this.currentPosY = startPosY;
    }

    waterFall() {
        let cont = true;
        let tempY = this.currentPosY;
        while (cont) {
            let char = this.chart[tempY + 1][this.currentPosX];
            if (char == '.') {
                this.currentPosY++;
                tempY++;
                this.chart[this.currentPosY][this.currentPosX] = '|';
            } else {
                //outFile.writeArrayOfArray(this.chart);
                cont = false;
                if ((char == '#') || (char == '~')) {
                    //Floow found fill spare
                    this.waterFillSpace();
                } else {
                    //either flowing water or outofbounds, i.e. stop
                }
            }
        }

    }

    waterFillSpace() {
        //Fill until atleast one waterfall, waterfall creates a recursive call
        let foundWaterFall = false;
        while (foundWaterFall == false) {
            let minX = this.currentPosX
            let maxX = this.currentPosX;
            let direction = -1;
            ({ foundWaterFall, minX } = this.fillDirection(direction, foundWaterFall));
            direction = +1;
            ({ foundWaterFall, maxX } = this.fillDirection(direction, foundWaterFall));
            if (foundWaterFall == false) {
                //change to still water, whole row
                for (let _x = minX; _x < maxX + 1; _x++) {
                    this.chart[this.currentPosY][_x] = '~';
                }
                this.currentPosY--;

                //outFile.writeArrayOfArray(this.chart);
            }
        }

    }

    private fillDirection(direction, foundWaterFall: boolean) {
        let cont = true;
        let minX = this.currentPosX;
        let maxX = this.currentPosX;
        let tempX = this.currentPosX;
        let tempY = this.currentPosY;
        while (cont) {
            let char = this.chart[tempY][tempX];
            let charDown = this.chart[tempY + 1][tempX];
            if (((char == '.') || (char == '|')) && ((charDown == '#') || (charDown == '~'))) {
                this.chart[tempY][tempX] = '|';
                if (tempX < minX) {
                    minX = tempX;
                } else if (tempX > maxX) {
                    maxX = tempX;
                }
            } else if ((char == '.') && (charDown == '.')) {
                //we have a new waterfall from
                this.chart[tempY][tempX] = '|';
                let localWater = new Water(this.chart, tempX, tempY);
                localWater.waterFall();
                cont = false;
                foundWaterFall = true;
            }
            else {
                cont = false;
            }
            tempX = tempX + direction;
        }
        return { foundWaterFall, minX, maxX };
    }

    countWaterSpringActive() {
        let count = 0;
        this.chart.forEach(row => {
            row.forEach(char => {
                if ((char == '~') || (char == '|')) {
                    count++;
                }
            })
        })
        return count;
    }

    countWater() {
        let count = 0;
        this.chart.forEach(row => {
            row.forEach(char => {
                if (char == '~') {
                    count++;
                }
            })
        })
        return count;
    }
}

function inputData(typeOfData: String) {
    let returnData: string;
    //load data    
    if (typeOfData.startsWith('T1_')) {
        let num = typeOfData.substring(3);
        returnData = puzzle1_ex[+num];
    }
    if (typeOfData.startsWith('T2_')) {
        let num = typeOfData.substring(3);
        returnData = puzzle1_ex[+num];
    }
    switch (typeOfData) {
        case 'PartA':
        case 'PartB':
            let fileString = fs.readFileSync('./puzzleInput1.txt', 'utf8');
            returnData = fileString;
            //console.log('Puzzle input', returnData);
            break;
        default:
            break;
    }
    return returnData;
}

function processInput(typeofData: string) {
    let rawInput = inputData(typeofData);

    let inputArray: Array<Array<number>> = new Array();

    const regexGetFirstChar: RegExp = /x|y/m;
    const regexGetValues: RegExp = /(\d+),..=(\d+)..(\d+)$/m;

    let valueArray;
    let minY = Number.MAX_SAFE_INTEGER;
    let minX = Number.MAX_SAFE_INTEGER;
    let maxY = 0;
    let maxX = 0

    let rawStrings = rawInput.split('\n');

    rawStrings.forEach(row => {
        let testChar = row.match(regexGetFirstChar);
        valueArray = row.match(regexGetValues);
        if (testChar[0] == 'x') {
            //            console.log('Row starts with x=' + valueArray[0]);
            let xCord: number = +valueArray[1];
            let yStart: number = +valueArray[2];
            let yStop: number = +valueArray[3];
            if (yStart < minY) {
                minY = yStart;
            }
            if (yStop > maxY) {
                maxY = yStop;
            }
            if (xCord < minX) {
                minX = xCord;
            }
            if (xCord > maxX) {
                maxX = xCord;
            }
            for (let yCord = yStart; yCord < (yStop + 1); yCord++) {
                inputArray.push([xCord, yCord]);
            }
        } else {
            //            console.log('Row starts with y=' + valueArray[0]);
            let yCord: number = +valueArray[1];
            let xStart: number = +valueArray[2];
            let xStop: number = +valueArray[3];
            if (xStart < minX) {
                minX = xStart;
            }
            if (xStop > maxX) {
                maxX = xStop;
            }
            if (yCord < minY) {
                minY = yCord;
            }
            if (yCord > maxY) {
                maxY = yCord;
            }
            for (let xCord = xStart; xCord < (xStop + 1); xCord++) {
                inputArray.push([xCord, yCord]);
            }
        }
    })

    console.log('Input processing done xMin:', minX, 'xMax:', maxX, 'yMin:', minY, 'yMax', maxY);
    return {
        inArray: inputArray,
        maxY: maxY,
        minY: minY,
        minX: minX,
        maxX: maxX,
    }
}

function partA(typeOfData: string): number {
    let inArray: Array<Array<number>>;
    let maxY: number, minY: number, minX: number, maxX: number;
    let returns = processInput(typeOfData);

    inArray = returns.inArray;
    maxY = returns.maxY;
    minY = returns.minY;
    minX = returns.minX - 5; //Take care of eventual overflow
    maxX = returns.maxX + 5; //same

    let chart: Array<Array<string>> = new Array;
    prepareStartChart();

    let water = new Water(chart, 500 - minX, 0);
    water.waterFall();
    let count = water.countWaterSpringActive();
    outFile.writeArrayOfArray(water.chart);

    //Fall down until a floor |
    //Fill new space untill wall or no floor |
    //If space is full move one step up (on the flow marker)=> change | to . for the static water

    return count;

    function prepareStartChart() {
        let xRow: Array<string> = new Array;

        //Row 0
        for (let x = minX; x < maxX + 1; x++) {
            xRow.push('.');
        }
        chart.push(xRow);

        for (let y = minY; y < maxY + 1; y++) {
            xRow = new Array;
            for (let x = minX; x < maxX + 1; x++) {
                xRow.push('.');
            }
            chart.push(xRow);
        }

        inArray.forEach(cords => {
            chart[cords[1] - minY + 1][cords[0] - minX] = '#';
        });

        chart[0][500 - minX] = '+';

        //Add end marker
        xRow = new Array;
        for (let x = minX; x < maxX + 1; x++) {
            xRow.push('=');
        }

        chart.push(xRow);
    }
}

function partB(typeOfData: string): number {
    let inArray: Array<Array<number>>;
    let maxY: number, minY: number, minX: number, maxX: number;
    let returns = processInput(typeOfData);

    inArray = returns.inArray;
    maxY = returns.maxY;
    minY = returns.minY;
    minX = returns.minX - 5; //Take care of eventual overflow
    maxX = returns.maxX + 5; //same

    let chart: Array<Array<string>> = new Array;
    prepareStartChart();

    let water = new Water(chart, 500 - minX, 0);
    water.waterFall();
    let count = water.countWater();

    //Fall down until a floor |
    //Fill new space untill wall or no floor |
    //If space is full move one step up (on the flow marker)=> change | to . for the static water

    return count;

    function prepareStartChart() {
        let xRow: Array<string> = new Array;

        //Row 0
        for (let x = minX; x < maxX + 1; x++) {
            xRow.push('.');
        }
        chart.push(xRow);

        for (let y = minY; y < maxY + 1; y++) {
            xRow = new Array;
            for (let x = minX; x < maxX + 1; x++) {
                xRow.push('.');
            }
            chart.push(xRow);
        }

        inArray.forEach(cords => {
            chart[cords[1] - minY + 1][cords[0] - minX] = '#';
        });

        chart[0][500 - minX] = '+';

        //Add end marker
        xRow = new Array;
        for (let x = minX; x < maxX + 1; x++) {
            xRow.push('=');
        }

        chart.push(xRow);
    }
}


function specialTest() {
    let input = `..............................................................................................................................................................................................................................................................................................................................................................+..............................................................
.........#...................................................................................................................................................................................................................................................................................................................................................................................................................
.........#....................#..............................................................................................................................................................................................................................................................................................................................................................................................
.........#....................#..............................................................................................................................................................................................................................................................................................................................................................................................
.........#....................#..............................................................................................................................................................................................................................................................................................................................................................................................
.........#..........#...#.....#..............................................................................................................................................................................................................................................................................................................................................................................................
.........#..........#...#.....#..............................................................................................................................................................................................................................................................................................................................................................................................
.........#..........#...#.....#..............................................................................................................................................................................................................................................................................................................................................................................................
.........#..........#...#.....#..............................................................................................................................................................................................................................................................................................................................................................................................
.........#..........#...#.....#...................................................................................................................................................................................................................................................................................................................#...................#......................................................
.........#..........#...#.....#.................................................................................................................................................................................................................................................#.................................................................#...................#...........................................#..........
.........#..........#...#.....#......................................................................................................................................................................................................................#..........................#.................................................................#...................#..............................#............#..........
.........#..........#...#.....#......................................................................................................................................................................................................................#..........................#.................................................................#...................#..............................#............#..........
.........#..........#...#.....#......................................................................................................................................................................................................................#..........................#.................................................................#...................#..............................#............#..........
.........#..........#...#.....#......................................................................................................................................................................................................................#..........................#.................................................................#...................#..............................#............#..........
.........#..........#...#.....#......................................................................................................................................................................................................................#..........................#.............................#...................................#...................#..............................#............#..........
.........#..........#...#.....#......................................................................................................................................................................................................................#..........................#.............................#..........................#........#...................#..............................#............#..........
.........#..........#####.....#.................................................#....................................................................................................................................................................#..........................#.............................#..........................#........#...................#..............................#............#..........
.........#....................#.................................................#.............#......................................................................................................................................................#.............#####........#.............................#..........................#........#...................#..............................#............#..........
.........#....................#.................................................#.............#......................................................................................................................................................#.............#...#........#.............................#..........................#........#####################..............................#............#..........
.........#....................#.................................................#.............#......................................................................................................................................................#.............#####........#.............................#..........................#...........................................................#............#..........
.........#....................#.................................................#.............#......................................................................................................................................................#..........................#.............................#................#..#......#...........................................................#............#..........
.........#....................#.................................................#.............#......................................................................................................................................................#..........................#.............................#................#..#......#...........................................................#............#..........
.........#....................#.................................................#.............#......................................................................................................................................................#..........................#.............................#................#..#......#...........................................................#............#..........
.........#....................#.................................................#.............#......................................................................................................................................................#..........................#.............................#................#..#......#...........................................................#............#..........
.........#....................#.................................................#.............#......#...............................................................................................................................................############################.............................#................####......#...........................................................#............#..........
.........#....................#.................................................#.............#......#...............#........................................................................................................................................................................................#..........................#...........................................#...............#............#..........
.........######################.................................................#.............#......#...............#........................................................................................................................................................................................#..........................#...............#...........................#...............#............#..........
................................................................................#.............#......#...............#........................................................................................................................................................................................#..........................#...............#...........................#...............#............#..........
................................................................................#.............#......#...............#........................................................................................................................................................................................#..........................#...............#...........................#...............##############..........
................................................................................#.............#......#################........................................................................................................................................................................................#..........................#...............#.................#####.....#.......................................
................................................................................#.............#...............................................................................................................................................................................................................############################...............#.................#...#.....#.......................................
................................................................................#.............#..........................................................................................................................................................................................................................................................#.................#...#.....#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#.................#...#.....#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#.................#...#.....#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#.................#...#.....#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#.................#####.....#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#...........................#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#...........................#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#...........................#.......................................
................................................................................#.............#....................................................#....................#................................................................................................................................................................................#############################.......................................
............................................................#........#..........#.............#....................................................#....................#....................................................................................................................................................................................................................................................
............................................................#........#..........#.............#....................................................#....................#....................................................................................................................................................................................................................................................
............................................................#........#....#.....#.............#....................................................#....................#....................................................................................................................................................................................................................................................`


    let chart: Array<Array<string>> = new Array;
    let rows = input.split('\n');
    console.log('Duumy')

    rows.forEach(row => {
        let newRow = new Array;
        row.split('').forEach(char => {
            newRow.push(char)
        });
        chart.push(newRow);
    })

    let length = rows[0].length;
    let lastRow = new Array(length).fill('=');
    chart.push(lastRow);

    let water = new Water(chart, 500 - 155, 0);
    water.waterFall();
    let count = water.countWaterSpringActive();
    outFile.writeArrayOfArray(water.chart);
}

function main() {

    //specialTest();

    TestsForPart1();
    let resultPart1 = partA('PartA');
    console.log('Puzzle part 1 solution is', resultPart1);
    
    TestsForPart2();
    let resultPart2 = partB('PartB');
    console.log('Puzzle part 2 solution is', resultPart2);


    function TestsForPart2() {
        for (let i = 0; i < puzzle2_number_of_test; i++) {
            let testCalc = partB('T2_' + i);
            if (testCalc == puzzle2_resultex[i]) {
                console.log('Puzzle part 2 example', i, 'passed');
            } else {
                console.log('Puzzle part 2 example', i, 'failed got', testCalc, 'expected', puzzle2_resultex[i]);
            }
        }
    }

    function TestsForPart1() {
        for (let i = 0; i < puzzle1_number_of_test; i++) {
            let testCalc = partA('T1_' + i);
            if (testCalc == puzzle1_resultex[i]) {
                console.log('Puzzle part 1 example', i, 'passed');
            } else {
                console.log('Puzzle part 1 example', i, 'failed got', testCalc, 'expected', puzzle1_resultex[i]);
            }
        }
    }
}
main();
